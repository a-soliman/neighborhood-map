"use strict";var map=void 0,infoWindow=void 0,markers=[],backupLocations=[{name:"The Trident",position:{lat:37.853405,lng:-122.478708},image:"https://s3-media3.fl.yelpcdn.com/bphoto/SavnswRo8GIvK1nKc-boyA/o.jpg",rating:3.5,address:"558 Bridgeway",highlighted:ko.observable(!1)},{name:"Napa Valley Burger Company",position:{lat:37.854616,lng:-122.479051},image:"https://s3-media2.fl.yelpcdn.com/bphoto/c4qNa-lDiZkMWRCirX1lgA/o.jpg",rating:4,address:"670 Bridgeway",highlighted:ko.observable(!1)},{name:"Barrel House Tavern",position:{lat:37.855221,lng:-122.478831},image:"https://s3-media3.fl.yelpcdn.com/bphoto/ndYSXvbqcxIthPof8nNbow/o.jpg",rating:3.5,address:"660 Bridgeway",highlighted:ko.observable(!1)},{name:"Lighthouse Cafe",position:{lat:37.856413,lng:-122.480081},image:"https://s3-media4.fl.yelpcdn.com/bphoto/rx9px8mrxgCFKU0img12MA/o.jpg",rating:4,address:"1311 Bridgeway",highlighted:ko.observable(!1)},{name:"Seafood Peddler",position:{lat:37.856567,lng:-122.478235},image:"https://s3-media1.fl.yelpcdn.com/bphoto/p6xdlY3vpG-G7WeGAFYOyA/o.jpg",rating:3.5,address:"303 Johnson St",highlighted:ko.observable(!1)}];function AppViewModel(){var t=this;t.spinner=ko.observable(!1),t.locations=ko.observableArray(),t.filteredLocations=ko.observableArray(),t.filterString=ko.observable(""),t.dataLoadError=ko.observable(!1),t.signalHighlited=function(o){for(var e=o.name,n=0;n<t.locations().length;n++){var a=t.locations()[n];if(a.name==e){a.highlighted(!0);var i=markers.filter(function(o){return o.name==e})[0];i&&(t.animateBouncing(i),t.displayInfoWindow(i))}else a.highlighted(!1)}},t.animateBouncing=function(e){markers.forEach(function(o){o==e?o.setAnimation(google.maps.Animation.BOUNCE):o.setAnimation(null)})},t.displayInfoWindow=function(o){infoWindow.setContent('\n            <div class="infoWindow">\n                <h3 class="name">'+o.name+'</h3>\n                <h4 class="rating">Yelp Rating: '+o.rating+"</h4>\n                <p>"+o.address+'</p>\n                <img src="'+o.image+'">\n            </div>\n            '),infoWindow.open(map,o)},t.search=function(){var e=t.filterString();if(0<e.length){var o=t.locations().filter(function(o){return o.name.toLowerCase().includes(e)});t.filteredLocations(o)}else t.filteredLocations([]);t.filterMarkers(e)},t.filterMarkers=function(e){var o=markers.filter(function(o){return-1==o.name.toLowerCase().indexOf(e)}),n=markers.filter(function(o){return-1!=o.name.toLowerCase().indexOf(e)});o.forEach(function(o){o.setMap(null)}),n.forEach(function(o){o.setMap(map)})},t.toggleNav=function(){var o=$(".list-container"),e=$(".toggle-icon");o.toggle(),o.is(":visible")?e.removeClass("fa-arrow-right").addClass("fa-arrow-left"):e.removeClass("fa-arrow-left").addClass("fa-arrow-right")}}var viewModel=new AppViewModel;function initMap(){var o=document.getElementById("map");map=new google.maps.Map(o,{center:{lat:37.855221,lng:-122.478831},zoom:14,mapTypeId:"roadmap"}),viewModel.locations().forEach(function(o,e){var n=new google.maps.Marker({position:o.position,map:map,name:o.name,image:o.image,rating:o.rating,address:o.address,id:e});infoWindow=new google.maps.InfoWindow,n.addListener("click",function(){infoWindow.setContent('\n            <div class="infoWindow">\n                <h3 class="name">'+n.name+'</h3>\n                <h4 class="rating">Yelp Rating: '+n.rating+"</h4>\n                <p>"+n.address+'</p>\n                <img src="'+n.image+'">\n            </div>\n            '),infoWindow.open(map,n),viewModel.signalHighlited(n)}),markers.push(n)})}function getLocationsFromYelp(){fetch("http://localhost:3333").then(function(o){200===o.status?o.json().then(function(o){o.forEach(function(o){o.highlighted=ko.observable(!1)}),viewModel.locations(o),viewModel.dataLoadError(!1),initMap()}):o.json().then(function(o){console.log("check the backend"),viewModel.locations(backupLocations),initMap()})}).catch(function(o){console.log("Fetch Error :-S",o),viewModel.locations(backupLocations),viewModel.dataLoadError(!0),alert("Error has occurred while loading data, results will be limited.."),initMap()})}function raiseGAPIError(){alert("Error loading GMaps API script.")}getLocationsFromYelp(),ko.applyBindings(viewModel);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
