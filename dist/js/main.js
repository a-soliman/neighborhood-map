"use strict";var map=void 0,infoWindow=void 0,markers=[],backupLocations=[{name:"The Trident",position:{lat:37.853405,lng:-122.478708},image:"https://s3-media3.fl.yelpcdn.com/bphoto/SavnswRo8GIvK1nKc-boyA/o.jpg",rating:3.5,address:"558 Bridgeway",highlighted:ko.observable(!1)},{name:"Napa Valley Burger Company",position:{lat:37.854616,lng:-122.479051},image:"https://s3-media2.fl.yelpcdn.com/bphoto/c4qNa-lDiZkMWRCirX1lgA/o.jpg",rating:4,address:"670 Bridgeway",highlighted:ko.observable(!1)},{name:"Barrel House Tavern",position:{lat:37.855221,lng:-122.478831},image:"https://s3-media3.fl.yelpcdn.com/bphoto/ndYSXvbqcxIthPof8nNbow/o.jpg",rating:3.5,address:"660 Bridgeway",highlighted:ko.observable(!1)},{name:"Lighthouse Cafe",position:{lat:37.856413,lng:-122.480081},image:"https://s3-media4.fl.yelpcdn.com/bphoto/rx9px8mrxgCFKU0img12MA/o.jpg",rating:4,address:"1311 Bridgeway",highlighted:ko.observable(!1)},{name:"Seafood Peddler",position:{lat:37.856567,lng:-122.478235},image:"https://s3-media1.fl.yelpcdn.com/bphoto/p6xdlY3vpG-G7WeGAFYOyA/o.jpg",rating:3.5,address:"303 Johnson St",highlighted:ko.observable(!1)}];function AppViewModel(){var t=this;t.spinner=ko.observable(!1),t.locations=ko.observableArray(),t.filteredLocations=ko.observableArray(),t.filterString=ko.observable(""),t.signalHighlited=function(n){for(var e=n.name,o=0;o<t.locations().length;o++){var i=t.locations()[o];if(i.name==e){i.highlighted(!0);var a=markers.filter(function(n){return n.name==e})[0];a&&(t.animateBouncing(a),t.displayInfoWindow(a))}else i.highlighted(!1)}},t.animateBouncing=function(e){markers.forEach(function(n){n==e?n.setAnimation(google.maps.Animation.BOUNCE):n.setAnimation(null)})},t.displayInfoWindow=function(n){infoWindow.setContent('\n            <div class="infoWindow">\n                <h3 class="name">'+n.name+'</h3>\n                <h4 class="rating">Yelp Rating: '+n.rating+"</h4>\n                <p>"+n.address+'</p>\n                <img src="'+n.image+'">\n            </div>\n            '),infoWindow.open(map,n)},t.search=function(){var e=t.filterString();if(0<e.length){var n=t.locations().filter(function(n){return n.name.toLowerCase().includes(e)});t.filteredLocations(n)}else t.filteredLocations([]);t.filterMarkers(e)},t.filterMarkers=function(e){var n=markers.filter(function(n){return-1==n.name.toLowerCase().indexOf(e)}),o=markers.filter(function(n){return-1!=n.name.toLowerCase().indexOf(e)});n.forEach(function(n){n.setMap(null)}),o.forEach(function(n){n.setMap(map)})},t.toggleNav=function(){var n=$(".list-container"),e=$(".toggle-icon");n.toggle(),n.is(":visible")?e.removeClass("fa-arrow-right").addClass("fa-arrow-left"):e.removeClass("fa-arrow-left").addClass("fa-arrow-right")}}var viewModel=new AppViewModel;function initMap(){var n=document.getElementById("map");map=new google.maps.Map(n,{center:{lat:37.855221,lng:-122.478831},zoom:14,mapTypeId:"roadmap"}),viewModel.locations().forEach(function(n,e){var o=new google.maps.Marker({position:n.position,map:map,name:n.name,image:n.image,rating:n.rating,address:n.address,id:e});infoWindow=new google.maps.InfoWindow,o.addListener("click",function(){infoWindow.setContent('\n            <div class="infoWindow">\n                <h3 class="name">'+o.name+'</h3>\n                <h4 class="rating">Yelp Rating: '+o.rating+"</h4>\n                <p>"+o.address+'</p>\n                <img src="'+o.image+'">\n            </div>\n            '),infoWindow.open(map,o),viewModel.signalHighlited(o)}),markers.push(o)})}function getLocationsFromYelp(){fetch("http://localhost:3333").then(function(n){200===n.status?n.json().then(function(n){n.forEach(function(n){n.highlighted=ko.observable(!1)}),viewModel.locations(n),initMap()}):n.json().then(function(n){console.log("check the backend"),viewModel.locations(backupLocations),initMap()})}).catch(function(n){console.log("Fetch Error :-S",n),viewModel.locations(backupLocations),initMap()})}getLocationsFromYelp(),ko.applyBindings(viewModel);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
